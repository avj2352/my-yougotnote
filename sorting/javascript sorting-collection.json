{
    "id": "playlist-161433b8-ee9a-417a-a44d-13d4c83d4c47",
    "title": "All types Sorting in Javascript - Collection",
    "createdBy": "",
    "bookmarks": [{
        "id": "bookmark-37fb403d-fb77-48eb-a454-3ca819d321d3",
        "description": "<p><strong>Bubble sort - &nbsp;Explanation</strong></p><p>We compare adjacent items and the bigger number, bubbles up.</p><p>&nbsp;</p><p style=\"margin-left:0px;\"><i>The bubble sort method starts at the beginning of an unsorted array and 'bubbles up' unsorted values towards the end, iterating through the array until it is completely sorted. It does this by comparing adjacent items and swapping them if they are out of order. The method continues looping through the array until no swaps occur at which point the array is sorted.</i></p><p style=\"margin-left:0px;\">&nbsp;</p><p style=\"margin-left:0px;\"><i>This method requires multiple iterations through the array and for average and worst cases has quadratic time complexity. While simple, it is usually impractical in most situations.</i></p>",
        "start": 58,
        "position": 1,
        "video": {
            "id": "video-e6b46932-c5fb-469a-8a43-08e7f94dea2b",
            "url": "https://www.youtube.com/watch?v=IAeLoGzU4RE",
            "seen": 57.53259350453177,
            "total": 611.141
        },
        "pin": "yellow"
    }, {
        "id": "bookmark-2c345d70-31d4-4fbe-8d58-a8fbbf36ce94",
        "description": "<p><strong>Solution for Bubble Sort Algorithm (in Javascript)</strong></p><p>&nbsp;</p><p><strong>Classic Implementation</strong></p><pre><code class=\"language-javascript\">function bubbleSort(array) {\n   // we don't need to compare the very last number\n   for(let i=0; i&lt;array.length-1; i++) {\n    // inorder to lock the highest number in it's place\n    for (let j=0;j&lt;array.length-1-i; j++) {\n\t\tif (array[j] &gt; array[j+1]) {\n\t\t  const temp = array[j];\n\t\t  array[j] = array[j+1];\n\t\t  array[j+1] = temp;\n\t\t}\n     } \n   }\n   return array;\n}\n\n// testing\nconsole.log(bubbleSort([1,4,2,8,345,123,43]));</code></pre>",
        "start": 147,
        "position": 2,
        "video": {
            "id": "video-3c8c19eb-dec0-4008-a28a-9de016b6ea55",
            "url": "https://www.youtube.com/watch?v=IAeLoGzU4RE",
            "seen": 147.25131083208768,
            "total": 611.141
        },
        "pin": "cyan"
    }, {
        "id": "bookmark-6a66fd87-51cc-438d-a808-5a91dad922be",
        "description": "<p><strong>NOTE:</strong> For the outer loop - array.length - Do we need all, because we don't want to compare the last item</p>",
        "start": 199,
        "position": 3,
        "video": {
            "id": "video-bc65c375-6923-4971-82f6-549c67b5b7ea",
            "url": "https://www.youtube.com/watch?v=IAeLoGzU4RE",
            "seen": 199.19875665840877,
            "total": 611.141
        }
    }, {
        "id": "bookmark-056ead5c-c052-469a-a468-e7849f358efe",
        "description": "<p>Couple ways we can refactor this code</p><p>&nbsp;</p><p>+ Making arrays simple</p><p>+ Instead of a variable, just flip the array on the right side<br><br><strong>Optimised Code</strong></p><p>&nbsp;</p><pre><code class=\"language-javascript\">function bubbleSort(array) {\n   // we don't need to compare the very last number\n   for(let i=0; i&lt;array.length-1; i++) {\n     // inorder to lock the highest number in it's place\n     for (let j=0;j&lt;array.length-1-i; j++) {\n\t    if (array[j] &gt; array[j+1]) {\n\t      // one liner trick to flip 2 numbers in an array\n\t      [array[j], array[j+1]] = [array[j+1], array[j]]; \n\t    }\n     } \n   }\n   return array;\n}\n\n// testing\nconsole.log(bubbleSort([1,4,2,8,345,123,43]));</code></pre>",
        "start": 405,
        "position": 5,
        "video": {
            "id": "video-cb639706-7db2-49f1-a21c-f481fed5bbdf",
            "url": "https://www.youtube.com/watch?v=IAeLoGzU4RE",
            "seen": 404.5490085664729,
            "total": 611.141
        },
        "pin": "cyan"
    }, {
        "id": "bookmark-09dda6ea-11f3-438b-a6e7-0ce617bb1025",
        "description": "<p><strong>Second optimisation (purely optional) - Pure functions !</strong></p><p>&nbsp;</p><p>Right now our function - bubbleSort() is an inplace algorithm, ie., it is mutating our original array</p><p>How can we make this function a Pure function with no side-effects</p><p>&nbsp;+ Make a shallow copy using the <strong>array.slice()</strong><br>&nbsp;+ Make a new array using the spread operator</p><p>&nbsp;</p><pre><code class=\"language-javascript\">function bubbleSort(array) {\n   const arr = array.slice(); //make a shallow copy!\n   // we don't need to compare the very last number\n   for(let i=0; i&lt;arr.length-1; i++) {\n     // inorder to lock the highest number in it's place\n     for (let j=0;j&lt;arr.length-1-i; j++) {\n\t    if (arr[j] &gt; arr[j+1]) {\n\t      // one liner trick to flip 2 numbers in an array\n\t      [arr[j], arr[j+1]] = [arr[j+1], arr[j]]; \n\t    }\n     } \n   }\n   return array;\n}\n\n// testing\nconsole.log(bubbleSort([1,4,2,8,345,123,43]));</code></pre>",
        "start": 450,
        "position": 6,
        "video": {
            "id": "video-233815b8-ed5b-4843-bd66-4bb8f59e1560",
            "url": "https://www.youtube.com/watch?v=IAeLoGzU4RE",
            "seen": 450.47503956198324,
            "total": 611.141
        },
        "pin": "cyan"
    }, {
        "id": "bookmark-7095fe8e-6ea2-488c-b57c-f8ae7dfd83e4",
        "description": "<p><strong>Space Time complexity of bubble sort</strong></p><p>&nbsp;</p><p><a href=\"https://www.bigocheatsheet.com\">Link to the Sorting algorithms cheat sheet</a></p><p>&nbsp;</p><p><strong>Time Complexity</strong><br>+ Since the loop follows x = 1+2+3+....+(N-1)<br>+ Therefore x = (N(N-1))/2<br>+ Big(O) = O(<strong>N^2)</strong></p><p>&nbsp;</p><p><strong>Space Complexity</strong></p><p>+ No data structures or arrays used, so Space Complexity is of constant<br>+ Big(O) = <strong>O(1)</strong></p>",
        "start": 399,
        "position": 7,
        "video": {
            "id": "video-144a099f-c95a-4eab-afc4-db24ab9e3669",
            "url": "https://youtu.be/Yffvd3pkTW4?t=399",
            "seen": 399.15982124450966,
            "total": 678.661
        },
        "pin": "red"
    }, {
        "id": "bookmark-f9e1ebf1-9cdf-4355-961e-20c95b9b9f60",
        "description": "<p><strong>Selection Sort - Explanation</strong></p><p>&nbsp;</p><p><i>Selection sort works by selecting the minimum value in a list and swapping it with the first value in the list. It then starts at the second position, selects the smallest value in the remaining list, and swaps it with the second element. It continues iterating through the list and swapping elements until it reaches the end of the list. Now the list is sorted.&nbsp;</i></p><p><i>Selection sort has quadratic time complexity in all cases.</i></p><p>&nbsp;</p><p>&nbsp;</p>",
        "start": 2,
        "position": 8,
        "video": {
            "id": "video-924a9ff4-a2d4-4bf3-a641-1fe60e470cca",
            "url": "https://www.youtube.com/watch?v=9jwm_9lOHu0",
            "seen": 1.995349314001341,
            "total": 687.221
        },
        "pin": "yellow"
    }, {
        "id": "bookmark-63ad5494-fdeb-4158-907b-cedf2a9d83ba",
        "description": "<p><strong>Explanation of Selection Sort</strong></p><p>&nbsp;</p><p>+ Find the first element, compare &amp; swap it</p><p>+ Next iteration ignore the first element, go to second element, compare &amp; swap it</p>",
        "start": 100,
        "position": 9,
        "video": {
            "id": "video-4ce1d671-4214-43d2-85cf-66916f44e5f0",
            "url": "https://www.youtube.com/watch?v=9jwm_9lOHu0",
            "seen": 100.40963275955514,
            "total": 687.221
        }
    }, {
        "id": "bookmark-abb5c5eb-7ec2-49d3-b0b4-c5892e92617b",
        "pin": "cyan",
        "description": "<p><strong>Classic implementation of Selection Sort (using Javascript)</strong></p><p>&nbsp;</p><pre><code class=\"language-javascript\">//in-place algorithm. mutates the array. side-effects\r\nfunction selectionSort(array) {\r\n    // we don't need to compare the last element\r\n\tfor (let i=0; i&lt;array.length - 1; i++) {\r\n\t   let minIndex = i;\r\n\t   // for j - we do need to go to the last element\r\n\t   // we assume first element is minIndex, so j=i+1\r\n\t   for (let j=i+1; j&lt;array.length; j++) {\r\n\t       if (array[j] &lt; array[minIndex]) {\r\n\t          minIndex = j;\r\n\t       }\r\n\t   }\r\n\t // swap\r\n\t const temp = array[i];\r\n\t array[i] = array[minIndex];\r\n\t array[minIndex] = temp;\r\n\t}\r\n\treturn array;\r\n}\r\n\r\n// testing\r\nconsole.log(selectionSort([1,4,2,8,345,123,32,5443,63]));</code></pre>",
        "start": 144,
        "position": 10,
        "video": {
            "id": "video-fac8d9d1-65b7-40f0-b54e-7247b8005639",
            "url": "https://www.youtube.com/watch?v=9jwm_9lOHu0",
            "seen": 143.71914120540623,
            "total": 687.221
        }
    }, {
        "id": "bookmark-9805d68d-2c75-4c8a-a83f-704992fb61b4",
        "pin": "cyan",
        "description": "<p>First optimization / Refactoring that we can do&nbsp;<br><br>+ Simple Array switch for swapping element</p><p>&nbsp;</p><pre><code class=\"language-javascript\">//in-place algorithm. mutates the array. side-effects\r\nfunction selectionSort(array) {\r\n    // we don't need to compare the last element\r\n    for (let i = 0; i &lt; array.length - 1; i++) {\r\n        let minIndex = i;\r\n        // for j - we do need to go to the last element\r\n        // we assume first element is minIndex, so j=i+1\r\n        for (let j = i + 1; j &lt; array.length; j++) {\r\n            if (array[j] &lt; array[minIndex]) {\r\n                minIndex = j;\r\n            }\r\n        }\r\n        // swap - one-line optimization\r\n        [array[i], array[minIndex]] = [array[minIndex], array[i]];\r\n    }\r\n    return array;\r\n}\r\n\r\n// testing\r\nconsole.log(selectionSort([1, 4, 2, 8, 345, 123, 32, 5443, 63]));</code></pre>",
        "start": 472,
        "position": 11,
        "video": {
            "id": "video-1dfa2825-dc82-415e-aeec-036350850459",
            "url": "https://www.youtube.com/watch?v=9jwm_9lOHu0",
            "seen": 471.52370017608314,
            "total": 687.221
        }
    }, {
        "id": "bookmark-6e63234c-634d-4790-a21b-c675bd6adfbe",
        "pin": "cyan",
        "description": "<p><strong>Second Optimization </strong>- Pure function</p><p>+ Creating a Shallow copy of the array. Making the function a pure function</p><p>+ Comes at a price - Space complexity is of the order N -&gt; <strong>O(N)</strong></p><p>&nbsp;</p><pre><code class=\"language-javascript\">//in-place algorithm. mutates the array. side-effects\r\nfunction selectionSort(array) {\r\n    const arr = [...array];\r\n    // we don't need to compare the last element\r\n    for (let i = 0; i &lt; arr.length - 1; i++) {\r\n        let minIndex = i;\r\n        // for j - we do need to go to the last element\r\n        // we assume first element is minIndex, so j=i+1\r\n        for (let j = i + 1; j &lt; arr.length; j++) {\r\n            if (arr[j] &lt; arr[minIndex]) {\r\n                minIndex = j;\r\n            }\r\n        }\r\n        // swap - one-line optimization\r\n        [arr[i], arr[minIndex]] = [arr[minIndex], arr[i]];\r\n    }\r\n    return arr;\r\n}\r\n\r\n// testing\r\nconst input = [1, 4, 2, 8, 345, 123, 32, 5443, 63];\r\nconsole.log('Sorted',selectionSort(input));\r\nconsole.log('Original array', input);</code></pre>",
        "start": 518,
        "position": 12,
        "video": {
            "id": "video-dd7833af-cf87-4af9-a9b2-0729a2edee7d",
            "url": "https://www.youtube.com/watch?v=9jwm_9lOHu0",
            "seen": 518.3588295109297,
            "total": 687.221
        }
    }, {
        "id": "bookmark-0361698c-a40d-43ba-a8b1-2164e13412c8",
        "description": "<p style=\"margin-left:0px;\"><strong>Space Time complexity of selection sort</strong></p><p style=\"margin-left:0px;\">&nbsp;</p><p style=\"margin-left:0px;\"><a href=\"https://www.bigocheatsheet.com/\">Link to the Sorting algorithms cheat sheet</a></p><p style=\"margin-left:0px;\">&nbsp;</p><p style=\"margin-left:0px;\"><strong>Time Complexity</strong><br>+ Since the loop follows x = 1+2+3+....+(N-1)<br>+ Therefore x = (N(N-1))/2<br>+ Big(O) = O(<strong>N^2)</strong></p><p style=\"margin-left:0px;\">&nbsp;</p><p style=\"margin-left:0px;\"><strong>Space Complexity</strong></p><p style=\"margin-left:0px;\">+ No data structures or arrays used, so Space Complexity is of constant<br>+ Big(O) = <strong>O(1)</strong></p><p style=\"margin-left:0px;\">+ If we end up using Pure functions, space complexity is <strong>O(N)</strong></p>",
        "start": 679,
        "position": 13,
        "video": {
            "id": "video-cfbff55b-1848-4e50-a845-37200477a60b",
            "url": "https://www.youtube.com/watch?v=9jwm_9lOHu0",
            "seen": 678.560585,
            "total": 687.221
        },
        "pin": "red"
    }, {
        "id": "bookmark-9c59d752-9857-4de7-92cc-c0db4bf0e2b7",
        "pin": "yellow",
        "description": "<p><strong>Insertion Sort </strong>-Definition</p><p>&nbsp;</p><p><i>This method works by building up a sorted array at the beginning of the list. It begins the sorted array with the first element.&nbsp;</i></p><p><i>Then it inspects the next element and swaps it backwards into the sorted array until it is in sorted position.&nbsp;</i></p><p><i>It continues iterating through the list and swapping new items backwards into the sorted portion until it reaches the end.&nbsp;</i></p><p>&nbsp;</p><p><i>This algorithm has quadratic time complexity in the average and worst cases.</i></p><p>&nbsp;</p>",
        "start": 14,
        "position": 14,
        "video": {
            "id": "video-2e5f7ede-461c-4516-a1ed-178f9f4fe4e0",
            "url": "https://www.youtube.com/watch?v=Q_U71D3U23M",
            "seen": 13.631363185012818,
            "total": 526
        }
    }, {
        "id": "bookmark-11e4847b-7072-4269-b19d-16a8d5f5a9d6",
        "description": "<p>Explaining Insertion Sort</p>",
        "start": 81,
        "position": 14,
        "video": {
            "id": "video-0d372533-a920-4308-ac4c-04b4fe30d9c0",
            "url": "https://www.youtube.com/watch?v=Q_U71D3U23M",
            "seen": 81.03527909155274,
            "total": 526
        }
    }, {
        "id": "bookmark-5cc047d8-7ce7-48e4-88ce-f5ee818a8496",
        "pin": "cyan",
        "description": "<p>Classic Implementation of <strong>Insertion sort</strong> (using Javascript)</p><p>&nbsp;</p><pre><code class=\"language-javascript\">console.log('Placeholder code');</code></pre>",
        "start": 200,
        "position": 15,
        "video": {
            "id": "video-3396f2d5-f81e-4279-b697-188195a33036",
            "url": "https://www.youtube.com/watch?v=Q_U71D3U23M",
            "seen": 200.4103508512268,
            "total": 526
        }
    }, {
        "id": "bookmark-e255e211-c7fe-4fbb-8188-d219c0612387",
        "pin": "gray",
        "description": "<p><strong>Optimization / Refactoring of our Insertion Sort Algorithm</strong></p><p>&nbsp;</p><pre><code class=\"language-javascript\">console.log('Placeholder code');</code></pre>",
        "start": 419,
        "position": 16,
        "video": {
            "id": "video-3c9aeffd-03f2-4177-84b7-1c37bf7cd62a",
            "url": "https://www.youtube.com/watch?v=Q_U71D3U23M",
            "seen": 419.30910602670286,
            "total": 526
        }
    }, {
        "id": "bookmark-3195ebc3-4e37-49b3-a589-ca93609f2b50",
        "description": "<p><strong>Heap Sort - Solution in Javascript</strong></p><p>&nbsp;</p><pre><code class=\"language-javascript\">// heap sort</code></pre>",
        "start": 11,
        "position": 19,
        "video": {
            "id": "video-86eebd54-4d60-4056-a97a-7151d9dbb5aa",
            "url": "https://www.youtube.com/watch?v=qjOzHmih-8c",
            "seen": 11.025009923706055,
            "total": 1109
        },
        "pin": "cyan"
    }, {
        "id": "bookmark-518a56dc-a1c3-4f0b-af26-d987039abae2",
        "description": "<p><strong>Heap Sort Solution Explanation</strong></p><p>&nbsp;</p><pre><code class=\"language-javascript\">console.log('Placeholder code');</code></pre>",
        "start": 545,
        "position": 19,
        "video": {
            "id": "video-90b2c9b4-f175-45d4-997c-08eae164e3d0",
            "url": "https://www.youtube.com/watch?v=qjOzHmih-8c",
            "seen": 545.4223198931885,
            "total": 1109
        }
    }]
}