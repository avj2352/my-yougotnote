{
  "id": "playlist-898c4033-502e-4914-8e1d-6414c8ae0733",
  "title": "Leetcode - March 2022 Playlist (Javascript)",
  "createdBy": "",
  "bookmarks": [
    {
      "id": "bookmark-335b47f5-877c-4c57-a1e0-e04241855fba",
      "description": "<p>ðŸ“œ <strong>Leetcode #696 - Count Binary Substrings</strong></p>",
      "start": 7,
      "position": 1,
      "video": {
        "id": "video-2313f1b1-1645-471e-b7e8-25b7b95d65b0",
        "url": "https://www.youtube.com/watch?v=MGPHPadxhtQ",
        "seen": 6.64400030001683,
        "total": 447.101
      },
      "pin": "yellow"
    },
    {
      "id": "bookmark-876ecc8d-447d-427b-a410-51361ed674a7",
      "description": "<p>Explaining the Problem Statement. Grouped &amp; Ungrouped substrings -&nbsp;</p><p>&nbsp;</p><pre><code class=\"language-javascript\">000111 // equal 1s and 0s &amp; grouped\n1010 // equal 1s and 0s but ungrouped</code></pre>",
      "start": 62,
      "position": 2,
      "video": {
        "id": "video-3b855951-ee14-49f9-960d-83d5b9c01d8c",
        "url": "https://www.youtube.com/watch?v=MGPHPadxhtQ",
        "seen": 62.08030520529658,
        "total": 447.101
      }
    },
    {
      "id": "bookmark-7e10a972-ee68-4cbd-a90c-9096b0888da1",
      "description": "<p>Different Testcases for Counting bit problem</p>",
      "start": 93,
      "position": 3,
      "video": {
        "id": "video-5ad079ba-d9c8-4dbf-a630-c0997b676cec",
        "url": "https://www.youtube.com/watch?v=uAcxY2w-oGI",
        "seen": 92.91302376720532,
        "total": 667.591
      }
    },
    {
      "id": "bookmark-86eafc88-8bf1-42a9-b8b5-f0a390da0fdd",
      "description": "<p>How many substrings can be formed with equal number of 0s and 1s</p><p>&nbsp;</p><pre><code class=\"language-javascript\">Consider - 000111\n1 Substring - 01\n2 Substring - 0011\n3 Substring - 000111</code></pre>",
      "start": 129,
      "position": 4,
      "video": {
        "id": "video-6ff25ca3-4613-41ac-bb1f-71d2bde6b4d2",
        "url": "https://www.youtube.com/watch?v=MGPHPadxhtQ",
        "seen": 129.32271830447968,
        "total": 447.101
      },
      "pin": "green"
    },
    {
      "id": "bookmark-5deb4364-1f1c-45db-b28f-2d6b34ac75be",
      "description": "<p>\"If new entry is added, then the number of substring is the Minimum number of countZeroes and countOnes\"</p><p>&nbsp;</p><p>How do we get this ?</p><p>&nbsp;</p><pre><code class=\"language-javascript\">Math.min(countZeroes, countOnes);</code></pre><p>&nbsp;</p><p>We know now the count of substrings in a string</p><p>&nbsp;</p>",
      "start": 163,
      "position": 5,
      "video": {
        "id": "video-545adda0-bb2d-4cef-bd13-0302843e94c5",
        "url": "https://www.youtube.com/watch?v=MGPHPadxhtQ",
        "seen": 163.42692148937635,
        "total": 447.101
      }
    },
    {
      "id": "bookmark-e626f465-a07f-4a2c-add8-fb346bd59d93",
      "description": "<p>Back to the problem statement -&nbsp;</p><blockquote><p><i>How many substrings are present in the below String with contiguous 0's &amp; 1''s &nbsp;?</i></p></blockquote><p>&nbsp;</p><p>+ We have 3 contiguous substrings</p><p>+ Some part of the previous substring is used in the current substring</p><p>+ We therefore need 2 variables - \"current\" &amp; \"previous'</p><p>+ count = Math.min(current, previous);</p><p>+ Output will be addition of the count</p><p>&nbsp;</p>",
      "start": 191,
      "position": 6,
      "video": {
        "id": "video-8c1b202f-e824-4f1d-a3bf-e61b6cbbe729",
        "url": "https://www.youtube.com/watch?v=MGPHPadxhtQ",
        "seen": 191.4655435108687,
        "total": 447.101
      },
      "pin": "green"
    },
    {
      "id": "bookmark-ee61a27d-75a3-448c-a3ae-c1c6a828248e",
      "description": "<p><strong>Approach #1 - Using Sliding Window Technique - in Javascript</strong></p><p>&nbsp;</p><pre><code class=\"language-javascript\">/**\n* Using sliding window technique\n* @param {string} s\n* @return {number}\n*/\nconst countBinarySubstrings = (s) =&gt; {\n let count = 0;\n let i = 1;\n let prev = 0;\n let curr = 1;\n while (i &lt; s.length) {\n  if (s.charAt(i-1) !== s.charAt(i)) {\n   count+=Math.min(prev, curr);\n   prev = curr;\n   curr = 1;\n  } else {\n   curr++;\n  }\n  i++;\n }\n};</code></pre>",
      "start": 287,
      "position": 7,
      "video": {
        "id": "video-5f1cac47-6f75-48b1-9447-bc59e92d8451",
        "url": "https://www.youtube.com/watch?v=MGPHPadxhtQ",
        "seen": 287.2314226735007,
        "total": 447.101
      },
      "pin": "cyan"
    },
    {
      "id": "bookmark-8adf6460-1499-4c56-9067-ab9549c02233",
      "description": "<p><strong>Another approach #2 - Group by Character</strong></p><p>&nbsp;</p><pre><code class=\"language-javascript\">/**\n * @param {string} s\n * Approach #2\n * Group by Character [Accepted]\n * @return {number}\n */\nvar countBinarySubstrings = function(s) {\n    const groups = new Array(s.length);\n    let t = 0;\n    groups[0] = 1;\n    for (let i=1; i&lt;s.length; i++) {\n        if (s.charAt(i-1) !== s.charAt(i)) {\n            groups[++t] = 1;\n        } else {\n            groups[t]++;\n        }\n    }\n    let ans = 0;\n    for (let i=1; i&lt;=t; i++) {\n        ans += Math.min(groups[i-1], groups[i]);\n    }\n    return ans;\n};</code></pre><p>&nbsp;</p><p><strong>Space time complexity&nbsp;</strong></p><p>&nbsp;</p><p>+ Time - O(N)</p><p>+ Space - O(N)</p>",
      "start": 430,
      "position": 8,
      "video": {
        "id": "video-cfebf030-0873-4e60-a0b8-c62798ddfd71",
        "url": "https://www.youtube.com/watch?v=MGPHPadxhtQ",
        "seen": 430.0768023709961,
        "total": 447.101
      },
      "pin": "cyan"
    },
    {
      "id": "bookmark-76289951-728a-40b1-a46d-42c228d2986c",
      "description": "<p><strong>ðŸ“œLeetcode: March 1st 2022 - Counting Bits</strong></p><p>&nbsp;</p><p><a href=\"https://leetcode.com/problems/counting-bits/\">Link to Leetcode problem: Counting Bits</a></p><p><i>Given an integer n, return an array ans of length n + 1 such that for each i (0 &lt;= i &lt;= n), ans[i] is the number of 1's in the binary representation of i.</i></p>",
      "start": 1,
      "position": 9,
      "video": {
        "id": "video-d158ed5e-f200-485b-9c8b-77c8fdbcf210",
        "url": "https://www.youtube.com/watch?v=uAcxY2w-oGI",
        "seen": 1.0318308760007178,
        "total": 667.591
      },
      "pin": "yellow"
    },
    {
      "id": "bookmark-d641bf27-476c-4481-9bd4-10b04f3a273e",
      "description": "<p><strong>My Approach to Solving Counting Bits</strong></p><p>&nbsp;</p><p>+ I created 2 functions - <strong>countingBits</strong> ~ which is the main function</p><p>+ <strong>countOnesInBit</strong> ~ which counts the number of 1s in the binary representation given a number</p><p>&nbsp;</p><p>Consider n to be the number input to the counting bit function</p><p>&nbsp;</p><p>+ Create an array of length - n+1 and fill it with zeroes</p><p>+ Loop through the number starting from 1 -&gt; call position as i</p><p>+ At \"i\"th position, call the countOnesInBit for the number</p><p>+ countOnesInBit converts the input from Number format to BinaryString format</p><p>+ Then I just loop through the string and count the number of 1s in it</p><p>+ Return the count</p><p>&nbsp;</p><pre><code class=\"language-javascript\">/**\n* helper function to count the number of ones\n* Convert number to binary string &gt;&gt;&gt; 0.toString(2)\n* loop thru the binary string and return the number of 1s\n* @param {number} input number\n* @return {number}\n*/\nfunction countOnesInBit (num) {\n  const binaryString = (num &gt;&gt;&gt; 0).toString(2);  //10  \n  let count = 0;\n  for (let char of binaryString) {\n    if (char === '1') count++;\n  }\n  return count;\n}\n\n/**\n * Main fn\n * @param {number} n\n * @return {number[]}\n */\nvar countBits = function(n) {\n    const arrList = Array(n+1).fill(0); // [0,0,0]\n    for (let i=1; i&lt;=n; i++) {\n        arrList[i] = countOnesInBit(i);\n    }\n    return arrList;\n};</code></pre><p>&nbsp;</p><p><strong>Space Time Complexity</strong></p><p>&nbsp;</p><p>Consider n to the be the input number</p><p>Time Complexity: O(n^2) ~ Quadratic because I am converting every input into a binary string and counting 1s in each binaryString</p><p>Space Complexity: O(n) ~ Because I am using an array &amp; filling it with the values</p>",
      "start": 589,
      "position": 10,
      "video": {
        "id": "video-829a3f02-5ea7-40d4-9234-25040ca64523",
        "url": "https://www.youtube.com/watch?v=uAcxY2w-oGI",
        "seen": 588.8010957909926,
        "total": 667.591
      },
      "pin": "cyan"
    },
    {
      "id": "bookmark-c3793012-44b2-4fc8-ab0b-847714fae583",
      "description": "<p>Sunchit's approach to solving Counting bits (in Javascript)</p><p>&nbsp;</p><pre><code class=\"language-javascript\">const countBits = (num) =&gt; {\n  const resultArr = Array(num+1).fill(0);\n  \n  for (let i=1; i&lt;=num; i++) {\n    if ((i%2) === 0) {\n      resultArr[i] = resultArr[i/2];\n    } else {\n      resultArr[i] = resultArr[i-1]+1;\n    }\n  }\n  return resultArr;\n};</code></pre><p>&nbsp;</p><p><strong>Space Time Complexity:</strong></p><p>&nbsp;</p><p>Time: O(n) ~ where n is the number input to the function</p><p>Space: O(n) ~ Technically we create an array of size (n+1) but worst space complexity is O(n)</p><p>&nbsp;</p><p>His solution is of Linear Time Space complexity !!</p>",
      "start": 592,
      "position": 11,
      "video": {
        "id": "video-96495ae6-2189-438e-8c0f-ba1de64576c1",
        "url": "https://www.youtube.com/watch?v=uAcxY2w-oGI",
        "seen": 591.8858155449668,
        "total": 667.591
      },
      "pin": "cyan"
    },
    {
      "id": "bookmark-93bfa8f4-9c83-41b3-965b-17fe71428a34",
      "description": "<p>ðŸ“œ <strong>Leetcode:</strong> <strong>March 2nd 2022 - Is Subsequence</strong></p><p>&nbsp;</p><p>Given two strings s and t, return true if s is a subsequence of t, or false otherwise.</p><p>&nbsp;</p><p>A subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., \"ace\" is a subsequence of \"abcde\" while \"aec\" is not).</p>",
      "start": 15,
      "position": 12,
      "video": {
        "id": "video-9d2a9053-9ef0-4716-b013-0a0a3ca903ed",
        "url": "https://www.youtube.com/watch?v=QmGQImp6vtM",
        "seen": 14.538154147572813,
        "total": 257.885
      },
      "pin": "yellow"
    },
    {
      "id": "bookmark-f272b64c-d982-45b7-8136-c420afa1e557",
      "description": "<p>My approach to solving Is Subsequence (Dynamic Programming ðŸ¤“)</p><p>&nbsp;</p><p>+ I call the string 1 as. - <strong>input string </strong>and substring as - <strong>test string</strong></p><p>+ Since the problem just asks to check if the <strong>test string</strong> is a subsequence or not, I can assume the most \"trivial\" string example - An empty string</p><p>+ what if we were to compare an empty string with the input string then the answer would be <strong>true</strong></p><p>+ Similarly the answer would be a false if the input string is empty and the test string still has some characters left in it</p><p>+ How do I determine if either of the string is empty (or indicate if I've successfully traversed the string) ? I do this by checking if the position of each string has exceeded it's length or not</p><p>+ with these details, I can form my base cases and recursive case</p><p>+ Plus for optimisation, I've memoized the solution&nbsp;</p><p>&nbsp;</p><pre><code class=\"language-javascript\">/**\n * @param {string} s\n * @param {string} t\n * @return {boolean}\n */\nvar isSubsequence = function(s, t) {\n    return checkSubsequence(t.split(''), s.split(''));\n};\n\n/**\n * Using Dynamic Programming to find the solution\n * @param {*} str1 \n * @param {*} str2 \n * @param {*} pos1 \n * @param {*} pos2 \n * @param {*} memo \n * @returns \n */\nfunction checkSubsequence(str1, str2, pos1=0, pos2=0, memo={}) {\n    // retrieve\n    const key = str1[pos1] + \",\".repeat(pos1+pos2) + str2[pos2];\n    if (key in memo) return memo[key];\n\n    // base cases #1\n    if (pos1 &gt;=str1.length &amp;&amp; pos2 &gt;=str2.length) return true;\n    // base cases #2\n    if (pos1 &gt;= str1.length) return false;\n    // base cases #3\n    if (pos2 &gt;= str2.length) return true;\n    // recursive case\n    if (str2[pos2] === str1[pos1]) {\n        memo[key] = checkSubsequence(str1, str2, pos1+1, pos2+1, memo);\n    } else {\n        memo[key] = checkSubsequence(str1, str2, pos1+1, pos2, memo);\n    }\n    return memo[key];\n} </code></pre><p>&nbsp;</p><p><strong>Space Time Complexity:</strong></p><p>Time : O(n) ~ due to memoization</p><p>Space: O(n) ~ due to the fact we're traversing through the string&nbsp;</p>",
      "start": 53,
      "position": 13,
      "video": {
        "id": "video-a1215afb-7c41-4502-aaef-350758495559",
        "url": "https://www.youtube.com/watch?v=QmGQImp6vtM",
        "seen": 52.74356609498657,
        "total": 257.885
      },
      "pin": "cyan"
    },
    {
      "id": "bookmark-1667ee5f-5c72-4291-8037-91ef926df4c5",
      "description": "<p><strong>Space Time Complexity</strong></p><p>&nbsp;</p><p>+ Time : O(N) - We are iterating through the string, so N = size</p><p>+ Space: O(1) - We are using primitive variables, no data structures needed</p>",
      "start": 421,
      "position": 14,
      "video": {
        "id": "video-52c16273-8734-459e-9055-0e1fce7d926e",
        "url": "https://www.youtube.com/watch?v=MGPHPadxhtQ",
        "seen": 420.8825789378444,
        "total": 447.101
      }
    },
    {
      "id": "bookmark-88c22767-d86f-4523-b250-901caa917f7e",
      "description": "<p><strong>IsSubsequence using 2 pointer approach (Sunchit's solution)</strong></p><p>&nbsp;</p><pre><code class=\"language-javascript\">/**\n * Is Subsequence using 2 pointer approach\n * @param {string} text1\n * @param {string} text2\n * @return {number}\n */\n const isSubsequence = function(t, s) {\n    if (s.length === 0) return true;\n    let i=0;\n    let j=0;\n    while (j&lt;t.length &amp;&amp; i&lt;s.length) {\n        if (s.charAt(i) === t.charAt(j)) {\n            i++;\n        }\n        j++;\n    }\n    return i === s.length;\n};\n\n\n// TESTING  \nconsole.log('LCS', isSubsequence(\"ahbgdc\", 'abc')); </code></pre><p>&nbsp;</p><p><strong>Space Time Complexity</strong></p><p>&nbsp;</p><p>Time: O(n+m) ~ where n &amp; m are the length of the 2 strings</p><p>Space: O(1) ~ since we use only primitives in our solution&nbsp;</p>",
      "start": 214,
      "position": 15,
      "video": {
        "id": "video-4e3cfa54-a8d7-4c76-92d0-dd47fb440724",
        "url": "https://www.youtube.com/watch?v=QmGQImp6vtM",
        "seen": 214.09347900199324,
        "total": 257.884
      },
      "pin": "cyan"
    },
    {
      "id": "bookmark-2e041cc2-2dd9-428d-991b-b7af9b82b34b",
      "description": "<p><strong>ðŸ“œ Leetcode: March 3rd 2022 - Arithmetic Slices</strong></p><p>&nbsp;</p><p><a href=\"https://leetcode.com/problems/arithmetic-slices/\">https:<i>//leetcode.com/problems/arithmetic-slices/</i></a></p><p>&nbsp;</p><p><strong>Leetcode Challenge #413</strong></p><p><br>An integer array is called arithmetic <i>if</i> it consists of at least three elements and <i>if</i> the difference between any two consecutive elements is the same.</p><p><br>+ For example, [1,3,5,7,9], [7,7,7,7], and [3,-1,-5,-9] are arithmetic sequences.</p><p>+ Given an integer array nums, <i>return</i> the number of arithmetic subarrays of nums.</p><p>+ A subarray is a contiguous subsequence of the array.</p><p>&nbsp;</p>",
      "start": 1,
      "position": 16,
      "video": {
        "id": "video-1953151c-2d3c-40ac-97bf-c5fbe73624e4",
        "url": "https://www.youtube.com/watch?v=qRHWAKCOLxM",
        "seen": 0.8639477254999589,
        "total": 602.466
      },
      "pin": "yellow"
    },
    {
      "id": "bookmark-f9872dcc-9b44-459d-886b-429272be3c60",
      "description": "<p><strong>Leetcode # 2 - Groups of Strings</strong></p><p>&nbsp;</p><p>+ Explained by Coding Decoded</p>",
      "start": 1,
      "position": 17,
      "video": {
        "id": "video-cdaff5c8-d487-40fb-829c-7666632153e2",
        "url": "https://www.youtube.com/watch?v=M_oVEpLlrlY",
        "seen": 1.345799580028928,
        "total": 803.081
      }
    },
    {
      "id": "bookmark-fbbef258-7970-4b80-a65e-74b7cc1e766c",
      "description": "<p>My approach to solving the Arithmetic Series problem</p><p>&nbsp;</p><p>+ Using 2 pointer approach</p><p>+ First consider the first element as \"i\"&nbsp;</p><p>+ Consider the next series as \"j\"</p><p>+ If j-1 == i then we know the numbers are adjacent to each other, get the difference, store as \"diff\"&nbsp;</p><p>+ if j-1 !== i then check if (j-1) - j equal the difference, if yes increment the number count</p><p>+ Return number count -2;</p><p>&nbsp;</p><pre><code class=\"language-javascript\">/**\n * @param {number[]} nums\n * @return {number}\n * Using 2 pointer approach \n */\nvar numberOfArithmeticSlices = function(A) {\n  let len = A.length;\n  let ans = 0;\n  for (let i = 0; i &lt; len; i++) {\n    let diff;\n    let num = 2;\n    for (let j = i + 1; j &lt; len; j++) {\n      if (j === i + 1)\n        diff = A[j] - A[i];\n      else if (A[j] - A[j - 1] === diff)\n        num++;\n      else\n        break;\n    }\n\n    ans += num - 2;\n  }\n\n  return ans;\n};</code></pre><p>&nbsp;</p><p><strong>Space Time Complexity:</strong></p><p>&nbsp;</p><p>Time: O(n^2) ~ because we use nested loops for 2 pointer approach</p><p>Space: O(1) ~ we use only primitives</p>",
      "start": 59,
      "position": 18,
      "video": {
        "id": "video-d4d0af64-1d19-4104-a3f6-3babc07b4542",
        "url": "https://www.youtube.com/watch?v=qRHWAKCOLxM",
        "seen": 59.186307647003495,
        "total": 602.466
      },
      "pin": "cyan"
    },
    {
      "id": "bookmark-8c05cf69-a283-4ee0-aa33-e1d3c2bd41cd",
      "description": "<p>ðŸ“œ<strong>Leetcode: March 4th 2022 - Champagne Tower ðŸ¥‚</strong></p><p>&nbsp;</p><p><a href=\"https://leetcode.com/problems/champagne-tower/\">https:<i>//leetcode.com/problems/champagne-tower/</i></a></p><p>&nbsp;</p><p><strong>Leetcode Challenge #799</strong></p><p>&nbsp;</p><p>We stack glasses in a pyramid, where the first row has 1 glass, the second row has 2 glasses, and so on until the 100th row. Each glass holds one cup of champagne.</p><p>&nbsp;</p><p><i>Then, some champagne is poured into the first glass at the top. When the topmost glass is full, any excess liquid poured will fall equally to the glass immediately to the left and right of it. When those glasses become full, any excess champagne will fall equally to the left and right of those glasses, and so on. (A glass at the bottom row has its excess champagne fall on the floor.)</i></p><p><i>For example, after one cup of champagne is poured, the top most glass is full. After two cups of champagne are poured, the two glasses on the second row are half full. After three cups of champagne are poured, those two cups become full - there are 3 full glasses total now. After four cups of champagne are poured, the third row has the middle glass half full, and the two outside glasses are a quarter full, as pictured below.</i></p><p>&nbsp;</p><p>Now after pouring some non-negative integer cups of champagne, <strong>return how full the jth glass in the ith row is</strong> (both i and j are 0-indexed.)</p>",
      "start": 1,
      "position": 19,
      "video": {
        "id": "video-ed94a5fc-66b1-4082-8044-3574071f9cff",
        "url": "https://www.youtube.com/watch?v=BTndk4qhObQ",
        "seen": 1.1333483459992153,
        "total": 688.601
      },
      "pin": "yellow"
    },
    {
      "id": "bookmark-575e1064-15ef-46ff-b4e6-ea4155047dc7",
      "description": "<p>This flow of glass in a pyramid structure is called. - <strong>Pascal's Triangle</strong></p>",
      "start": 76,
      "position": 20,
      "video": {
        "id": "video-98972740-886b-466b-bd42-a12df054d94c",
        "url": "https://www.youtube.com/watch?v=BTndk4qhObQ",
        "seen": 76.09115551957922,
        "total": 688.601
      }
    },
    {
      "id": "bookmark-fe0080c5-ea84-40f5-b160-95152ac28599",
      "description": "<p>Just to know - how to implement a Pascal's triangle given a <strong>row</strong> which would be the height of the pyramid</p><p>&nbsp;</p><pre><code class=\"language-javascript\">/**\n * Function to generate pascal's triangle array based on the row input\n * @param {number} row \n * @returns {number[]}\n */\nconst pascalsTriangle = (row) =&gt; {\n    // base case if \n    if (row === 1) return [1];\n    // recursive\n    const prevLine = pascalsTriangle(row-1);\n    let currLine = [1];\n    for (let i=0; i&lt;prevLine.length-1; i++) {\n        currLine.push(prevLine[i] + prevLine[i+1]);    \n    }\n    currLine.push(1);\n    return currLine;\n};\n\n// Testing\nconst row = 5;\nconsole.log(`Pascal's triangle for row ${row} is: `, pascalsTriangle(row));</code></pre>",
      "start": 107,
      "position": 21,
      "video": {
        "id": "video-f67dd65e-a0c8-40b3-8ea1-06985c824874",
        "url": "https://www.youtube.com/watch?v=BTndk4qhObQ",
        "seen": 106.65868976072063,
        "total": 688.601
      },
      "pin": "cyan"
    },
    {
      "id": "bookmark-771f3b77-a65a-4296-8212-e05c3d1260a9",
      "description": "<p>Generalise our approach</p><p>&nbsp;</p><p>+ This solution is solved very similar to Pascal's triangle except the value decreases&nbsp;</p><p>+ NOTE: Our final solution SHOULD not be greater than initial value provided</p><p>+ Every row in our Champagne tower can be generalised by the formula below</p><p>&nbsp;</p><pre><code class=\"language-javascript\">//                          n\n//               (n-1)/2         (n-1)/2\n// ((n-1)/2-1)/2 ((n-1/2-1)/2+((n-1)/2-1)/2 ((n-1)/2-1)/2</code></pre><p>&nbsp;</p>",
      "start": 191,
      "position": 22,
      "video": {
        "id": "video-65a70699-dc6f-4155-86c9-ce15bb2a77b4",
        "url": "https://www.youtube.com/watch?v=BTndk4qhObQ",
        "seen": 191.09489882695513,
        "total": 688.601
      }
    },
    {
      "id": "bookmark-c82223d6-f3d7-489c-b207-87698cb01cbe",
      "description": "<p>Implement Champagne Tower (in Javascript)</p><p>&nbsp;</p><pre><code class=\"language-javascript\">/**\n * Using iterative approach\n * @param {number} poured\n * @param {number} query_row\n * @param {number} query_glass\n * @return {number}\n */\nvar champagneTower = function(poured, query_row, query_glass) {\n   // edge case\n    if (poured === 0) return 0;\n    // just like in pascal's triangle\n    let list = [poured];\n    // iterative approach\n    while (query_row-- &gt; 0) {\n        let temp = [];\n        temp.push(Math.max((list[0]-1)/2, 0));\n        for (let i=1; i&lt;list.length; i++) {\n            temp.push(Math.max((list[i-1]-1)/2, 0) + Math.max((list[i]-1)/2, 0));\n        }\n        // to get the symmetry effect\n        temp.push(temp[0]); \n        // pass the newly formed rows to list\n        list = [...temp];\n    }\n    // If the value is less than 1 then return 1 (non-zero)\n    return Math.min(1, list[query_glass]);\n};</code></pre>",
      "start": 330,
      "position": 23,
      "video": {
        "id": "video-6a5c4b00-af6f-49c3-910b-2e142370d5a8",
        "url": "https://www.youtube.com/watch?v=BTndk4qhObQ",
        "seen": 330.2817971688731,
        "total": 688.601
      },
      "pin": "cyan"
    },
    {
      "id": "bookmark-1adabce9-9845-4a1e-8a79-92e6402e0973",
      "description": "<p>ðŸ“œ <strong>Leetcode: March 5th 2022 - Delete and Earn</strong></p><p><br>You are given an integer array nums. You want to maximize the number of points you get by performing the following operation any number of times:</p><p>&nbsp;</p><p>+ Pick any nums[i] and delete it to earn nums[i] points.&nbsp;</p><p>+ Afterwards, you must delete every element equal to nums[i] - 1 and every element equal to nums[i] + 1.</p><p>+ Return the maximum number of points you can earn by applying the above operation some number of times.</p><p>&nbsp;</p><pre><code class=\"language-javascript\">//Example 1:\n- Input: nums = [3,4,2]\n- Output: 6\nExplanation: You can perform the following operations:\n- Delete 4 to earn 4 points. Consequently, 3 is also deleted. nums = [2].\n- Delete 2 to earn 2 points. nums = [].\n\nYou earn a total of 6 points.\n\n//Example 2:\n- Input: nums = [2,2,3,3,3,4]\n- Output: 9\nExplanation: You can perform the following operations:\n- Delete a 3 to earn 3 points. All 2's and 4's are also deleted. nums = [3,3].\n- Delete a 3 again to earn 3 points. nums = [3].\n- Delete a 3 once more to earn 3 points. nums = [].\n\nYou earn a total of 9 points.</code></pre>",
      "start": 13,
      "position": 24,
      "video": {
        "id": "video-f783c860-6cb7-414c-a47f-d129c5cece88",
        "url": "https://www.youtube.com/watch?v=7FCemBxvGw0",
        "seen": 13.189559693975442,
        "total": 1211.301
      },
      "pin": "yellow"
    },
    {
      "id": "bookmark-42df0aed-4de2-4b21-b65c-81d49811cbe9",
      "description": "<p>ðŸ¤” Solving Delete &amp; Earn using Dynamic Programming &amp; Tabulation</p>",
      "start": 192,
      "position": 25,
      "video": {
        "id": "video-4b7bc1db-a7ea-4a33-a8d2-c6ce7ea951d9",
        "url": "https://www.youtube.com/watch?v=7FCemBxvGw0",
        "seen": 192.36096588186305,
        "total": 1211.301
      }
    },
    {
      "id": "bookmark-0c15283d-ece9-4c71-baa2-d9028ac68c69",
      "description": "<p>NeetCode solution using Javascript</p><p>&nbsp;</p><pre><code class=\"language-javascript\">/**\n * Using dynamic programming using tabulation\n * Instead of maintaining a table / list, use 2 values - earn1, earn2\n * @param {number[]} nums\n * @return {number}\n */\nvar deleteAndEarn = function(nums) {\n    // generate frequency map\n    const count = {};\n    for (let num of nums) {\n        if (num in count) count[num] +=1;\n        else count[num] = 1;\n    }\n    // get unique list\n    const numSet = Object.keys(count).sort();\n    // tabulation\n    let earn1 = 0; let earn2 = 0;\n    for (let i=0; i&lt;numSet.length; i++) {\n        let currEarn = numSet[i] * count[numSet[i]];\n        // can't use both currentEarn and earn2\n        if (i &gt; 0 &amp;&amp; numSet[i] === numSet[i-1] + 1) {\n            let temp01 = earn2;\n            earn2 = Math.max(currEarn + earn1, earn2);\n            earn1 = temp01;\n        } else {\n            let temp02 = earn2;\n            earn2 = currEarn + earn1;\n            earn1 = temp02;\n        }\n    }\n    return earn2;\n};</code></pre><p>&nbsp;</p><p>Space Time Complexity:</p><p>+ Time: O(nlogn) &nbsp;~ where n is the length of the array</p><p>+ Space : O(2n) ~ O(n) we use a frequency map and a set&nbsp;</p>",
      "start": 836,
      "position": 26,
      "video": {
        "id": "video-52fc04fa-d37e-4108-a4de-7d883937775d",
        "url": "https://www.youtube.com/watch?v=7FCemBxvGw0",
        "seen": 835.5693117284857,
        "total": 1211.301
      },
      "pin": "cyan"
    },
    {
      "id": "bookmark-9eb3f400-a675-497d-8b1e-2d2df872b80f",
      "description": "<p>ðŸ¤” <strong>Coding Decoded: Delete &amp; Earn Approach</strong></p><p>&nbsp;</p><p>+ Create a Frequency table of size - (n+1) where n is the 10003 ðŸ˜±</p><p>+ Fill the Frequency table with the occupancy of each number in the input array</p><p>+ Apply the Dynamic Programming with Tabulation formula</p><p>&nbsp;</p><pre><code class=\"language-javascript\">dp[i] = Math.max(dp[i-1], dp[i-2]+i*freq[i]);\n// where freq - &gt; frequency table we just created</code></pre>",
      "start": 54,
      "position": 27,
      "video": {
        "id": "video-99e7a727-bd4b-4f42-8936-c56183df1fa2",
        "url": "https://www.youtube.com/watch?v=fevOTPYq2p8",
        "seen": 54.48662798302419,
        "total": 784.903
      },
      "pin": "green"
    },
    {
      "id": "bookmark-173483bd-50a0-4804-bed6-f6ae30fa11de",
      "description": "<p>Refer the House Robber problem, also solved using DP with Tabulation</p>",
      "start": 667,
      "position": 28,
      "video": {
        "id": "video-d6648f39-c786-4dc9-b23d-272eabe9e9c1",
        "url": "https://www.youtube.com/watch?v=fevOTPYq2p8",
        "seen": 667.41319103369,
        "total": 784.903
      }
    },
    {
      "id": "bookmark-0bf7068b-61ba-4f1c-8dd0-97a26f383637",
      "description": "<p><strong>Solution to Delete &amp; Earn using Javascript</strong></p><p>&nbsp;</p><pre><code class=\"language-javascript\">/**\n* Delete and Earn\n* Using Dynamic Programming with Tabulation\n*/\nconst deleteAndEarn = (nums) =&gt; {\n\tconst freq = new Array(10002).fill(0);\n\tconst dp = new Array(10002).fill(0);\n\t\n\t// pre-fill our table\n\tfor(let num of nums) {\n\t   freq[nums[i]]++;\n\t} \n\t\n\t// populating the first cell\n\tdp[0] = 0;\n\tdp[1] = 1*freq[1];\n\tfor (let i=2; i&lt;10002; i++){\n\t  dp[i] = Math.max(dp[i-1], dp[i-2]+i*freq[i]);\n\t}\n\treturn dp[10001];\n};</code></pre><p>&nbsp;</p><p><strong>Space Time Complexity:</strong></p><p>&nbsp;</p><p>Time: O(n) ~ Where n is 10000</p><p>Space: O(n) ~ Where n is 10000</p>",
      "start": 702,
      "position": 29,
      "video": {
        "id": "video-24095055-2a50-4c4a-8b2b-03a41382e8e4",
        "url": "https://www.youtube.com/watch?v=fevOTPYq2p8",
        "seen": 701.5834063490029,
        "total": 784.903
      },
      "pin": "cyan"
    },
    {
      "id": "bookmark-3c96dfe9-590a-4f38-9771-08488880fdeb",
      "description": "<p>ðŸ“œ <strong>Leetcode #1359 - March 6th 2022 - Count all Valid Delivery &amp; Pickup options</strong></p><p>&nbsp;</p><p><i>Given n orders, each order consist in pickup and delivery services.&nbsp;</i></p><p><br>+ Count all valid pickup/delivery possible sequences such that delivery(i) is always after of pickup(i).<br>+ Since the answer may be too large, return it modulo 10^9 + 7.</p><p>&nbsp;</p><pre><code class=\"language-javascript\"># Example 1:\n\n- Input: n = 1\n- Output: 1\n- Explanation: Unique order (P1, D1), Delivery 1 always is after of Pickup 1.</code></pre><p>&nbsp;</p><pre><code class=\"language-javascript\"># Example 2:\n\n- Input: n = 2\n- Output: 6\n- Explanation: All possible orders:\n- (P1,P2,D1,D2), (P1,P2,D2,D1), (P1,D1,P2,D2), (P2,P1,D1,D2), (P2,P1,D2,D1) and (P2,D2,P1,D1).\n- This is an invalid order (P1,D2,P2,D1) because Pickup 2 is after of Delivery 2.</code></pre><p>&nbsp;</p><pre><code class=\"language-javascript\">Example 3:\n\n- Input: n = 3\n- Output: 90</code></pre><p>&nbsp;</p><pre><code class=\"language-javascript\">Constraints:\n1 &lt;= n &lt;= 500</code></pre>",
      "start": 13,
      "position": 30,
      "video": {
        "id": "video-854d6750-8f8c-48cf-8110-4f8be8c0eb82",
        "url": "https://www.youtube.com/watch?v=p1tvA-eQFqk",
        "seen": 12.888707059083872,
        "total": 743.2166666666667
      },
      "pin": "yellow"
    },
    {
      "id": "bookmark-47b3b6c7-10cf-41d4-b4bb-b1e726acbde5",
      "description": "<p><strong>Count All Valid Pickup and Delivery Options (solution in Javascript)</strong></p><p>&nbsp;</p><pre><code class=\"language-javascript\">/**\n * Solving the problem using the algorithm we came up with\n * @param {number} n\n * @return {number}\n */\nvar countOrders = function(n) {\n    const dp = new Array(501).fill(0);\n    const mod = Math.pow(10,9)+7;\n    dp[0] = 0;\n    dp[1] = 1;\n    dp[2] = 6; // based on the explanation\n    for (let i=3;i&lt;=n;i++){\n    \tlet oddNumber = 2*i-1;\n    \tlet permutations = oddNumber * (oddNumber+1)/2;\n    \tdp[i] = (dp[i-1]*(permutations))%mod;\n    }\n    return dp[n];\n};</code></pre><p>&nbsp;</p><p>Space Time complexity</p><p>+ Time -&gt; O (n) ~ where n is the length of the input number</p><p>+ Space -&gt; O(m) ~ where m is the max number of elements - 501.</p>",
      "start": 655,
      "position": 31,
      "video": {
        "id": "video-ac5d2969-138f-475a-b813-1c52bb08c587",
        "url": "https://www.youtube.com/watch?v=p1tvA-eQFqk",
        "seen": 655.0235273053846,
        "total": 743.2166666666667
      },
      "pin": "cyan"
    }
  ]
}
