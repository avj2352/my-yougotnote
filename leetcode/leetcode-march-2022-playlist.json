{
    "id": "playlist-0a296bd1-d8f0-4da0-9bc9-2431e9ec152f",
    "title": "Leetcode - March 2022 Playlist (Javascript)",
    "createdBy": "",
    "bookmarks": [{
        "id": "bookmark-76289951-728a-40b1-a46d-42c228d2986c",
        "description": "<p><strong>ðŸ“œLeetcode: March 1st 2022 - Counting Bits</strong></p><p>&nbsp;</p><p><a href=\"https://leetcode.com/problems/counting-bits/\">Link to Leetcode problem: Counting Bits</a></p><p><i>Given an integer n, return an array ans of length n + 1 such that for each i (0 &lt;= i &lt;= n), ans[i] is the number of 1's in the binary representation of i.</i></p>",
        "start": 1,
        "position": 1,
        "video": {
            "id": "video-d158ed5e-f200-485b-9c8b-77c8fdbcf210",
            "url": "https://www.youtube.com/watch?v=uAcxY2w-oGI",
            "seen": 1.0318308760007178,
            "total": 667.591
        },
        "pin": "yellow"
    }, {
        "id": "bookmark-7e10a972-ee68-4cbd-a90c-9096b0888da1",
        "description": "<p>Different Testcases for Counting bit problem</p>",
        "start": 93,
        "position": 2,
        "video": {
            "id": "video-5ad079ba-d9c8-4dbf-a630-c0997b676cec",
            "url": "https://www.youtube.com/watch?v=uAcxY2w-oGI",
            "seen": 92.91302376720532,
            "total": 667.591
        }
    }, {
        "id": "bookmark-d641bf27-476c-4481-9bd4-10b04f3a273e",
        "description": "<p><strong>My Approach to Solving Counting Bits</strong></p><p>&nbsp;</p><p>+ I created 2 functions - <strong>countingBits</strong> ~ which is the main function</p><p>+ <strong>countOnesInBit</strong> ~ which counts the number of 1s in the binary representation given a number</p><p>&nbsp;</p><p>Consider n to be the number input to the counting bit function</p><p>&nbsp;</p><p>+ Create an array of length - n+1 and fill it with zeroes</p><p>+ Loop through the number starting from 1 -&gt; call position as i</p><p>+ At \"i\"th position, call the countOnesInBit for the number</p><p>+ countOnesInBit converts the input from Number format to BinaryString format</p><p>+ Then I just loop through the string and count the number of 1s in it</p><p>+ Return the count</p><p>&nbsp;</p><pre><code class=\"language-javascript\">/**\n* helper function to count the number of ones\n* Convert number to binary string &gt;&gt;&gt; 0.toString(2)\n* loop thru the binary string and return the number of 1s\n* @param {number} input number\n* @return {number}\n*/\nfunction countOnesInBit (num) {\n  const binaryString = (num &gt;&gt;&gt; 0).toString(2);  //10  \n  let count = 0;\n  for (let char of binaryString) {\n    if (char === '1') count++;\n  }\n  return count;\n}\n\n/**\n * Main fn\n * @param {number} n\n * @return {number[]}\n */\nvar countBits = function(n) {\n    const arrList = Array(n+1).fill(0); // [0,0,0]\n    for (let i=1; i&lt;=n; i++) {\n        arrList[i] = countOnesInBit(i);\n    }\n    return arrList;\n};</code></pre><p>&nbsp;</p><p><strong>Space Time Complexity</strong></p><p>&nbsp;</p><p>Consider n to the be the input number</p><p>Time Complexity: O(n^2) ~ Quadratic because I am converting every input into a binary string and counting 1s in each binaryString</p><p>Space Complexity: O(n) ~ Because I am using an array &amp; filling it with the values</p>",
        "start": 589,
        "position": 3,
        "video": {
            "id": "video-829a3f02-5ea7-40d4-9234-25040ca64523",
            "url": "https://www.youtube.com/watch?v=uAcxY2w-oGI",
            "seen": 588.8010957909926,
            "total": 667.591
        },
        "pin": "cyan"
    }, {
        "id": "bookmark-c3793012-44b2-4fc8-ab0b-847714fae583",
        "description": "<p>Sunchit's approach to solving Counting bits (in Javascript)</p><p>&nbsp;</p><pre><code class=\"language-javascript\">const countBits = (num) =&gt; {\n  const resultArr = Array(num+1).fill(0);\n  \n  for (let i=1; i&lt;=num; i++) {\n    if ((i%2) === 0) {\n      resultArr[i] = resultArr[i/2];\n    } else {\n      resultArr[i] = resultArr[i-1]+1;\n    }\n  }\n  return resultArr;\n};</code></pre><p>&nbsp;</p><p><strong>Space Time Complexity:</strong></p><p>&nbsp;</p><p>Time: O(n) ~ where n is the number input to the function</p><p>Space: O(n) ~ Technically we create an array of size (n+1) but worst space complexity is O(n)</p><p>&nbsp;</p><p>His solution is of Linear Time Space complexity !!</p>",
        "start": 592,
        "position": 4,
        "video": {
            "id": "video-96495ae6-2189-438e-8c0f-ba1de64576c1",
            "url": "https://www.youtube.com/watch?v=uAcxY2w-oGI",
            "seen": 591.8858155449668,
            "total": 667.591
        },
        "pin": "cyan"
    }, {
        "id": "bookmark-93bfa8f4-9c83-41b3-965b-17fe71428a34",
        "description": "<p>ðŸ“œ <strong>Leetcode:</strong> <strong>March 2nd 2022 - Is Subsequence</strong></p><p>&nbsp;</p><p>Given two strings s and t, return true if s is a subsequence of t, or false otherwise.</p><p>&nbsp;</p><p>A subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., \"ace\" is a subsequence of \"abcde\" while \"aec\" is not).</p>",
        "start": 15,
        "position": 5,
        "video": {
            "id": "video-9d2a9053-9ef0-4716-b013-0a0a3ca903ed",
            "url": "https://www.youtube.com/watch?v=QmGQImp6vtM",
            "seen": 14.538154147572813,
            "total": 257.885
        },
        "pin": "yellow"
    }, {
        "id": "bookmark-f272b64c-d982-45b7-8136-c420afa1e557",
        "description": "<p>My approach to solving Is Subsequence (Dynamic Programming ðŸ¤“)</p><p>&nbsp;</p><p>+ I call the string 1 as. - <strong>input string </strong>and substring as - <strong>test string</strong></p><p>+ Since the problem just asks to check if the <strong>test string</strong> is a subsequence or not, I can assume the most \"trivial\" string example - An empty string</p><p>+ what if we were to compare an empty string with the input string then the answer would be <strong>true</strong></p><p>+ Similarly the answer would be a false if the input string is empty and the test string still has some characters left in it</p><p>+ How do I determine if either of the string is empty (or indicate if I've successfully traversed the string) ? I do this by checking if the position of each string has exceeded it's length or not</p><p>+ with these details, I can form my base cases and recursive case</p><p>+ Plus for optimisation, I've memoized the solution&nbsp;</p><p>&nbsp;</p><pre><code class=\"language-javascript\">/**\n * @param {string} s\n * @param {string} t\n * @return {boolean}\n */\nvar isSubsequence = function(s, t) {\n    return checkSubsequence(t.split(''), s.split(''));\n};\n\n/**\n * Using Dynamic Programming to find the solution\n * @param {*} str1 \n * @param {*} str2 \n * @param {*} pos1 \n * @param {*} pos2 \n * @param {*} memo \n * @returns \n */\nfunction checkSubsequence(str1, str2, pos1=0, pos2=0, memo={}) {\n    // retrieve\n    const key = str1[pos1] + \",\".repeat(pos1+pos2) + str2[pos2];\n    if (key in memo) return memo[key];\n\n    // base cases #1\n    if (pos1 &gt;=str1.length &amp;&amp; pos2 &gt;=str2.length) return true;\n    // base cases #2\n    if (pos1 &gt;= str1.length) return false;\n    // base cases #3\n    if (pos2 &gt;= str2.length) return true;\n    // recursive case\n    if (str2[pos2] === str1[pos1]) {\n        memo[key] = checkSubsequence(str1, str2, pos1+1, pos2+1, memo);\n    } else {\n        memo[key] = checkSubsequence(str1, str2, pos1+1, pos2, memo);\n    }\n    return memo[key];\n} </code></pre><p>&nbsp;</p><p><strong>Space Time Complexity:</strong></p><p>Time : O(n) ~ due to memoization</p><p>Space: O(n) ~ due to the fact we're traversing through the string&nbsp;</p>",
        "start": 53,
        "position": 6,
        "video": {
            "id": "video-a1215afb-7c41-4502-aaef-350758495559",
            "url": "https://www.youtube.com/watch?v=QmGQImp6vtM",
            "seen": 52.74356609498657,
            "total": 257.885
        },
        "pin": "cyan"
    }, {
        "id": "bookmark-88c22767-d86f-4523-b250-901caa917f7e",
        "description": "<p><strong>IsSubsequence using 2 pointer approach (Sunchit's solution)</strong></p><p>&nbsp;</p><pre><code class=\"language-javascript\">/**\n * Is Subsequence using 2 pointer approach\n * @param {string} text1\n * @param {string} text2\n * @return {number}\n */\n const isSubsequence = function(t, s) {\n    if (s.length === 0) return true;\n    let i=0;\n    let j=0;\n    while (j&lt;t.length &amp;&amp; i&lt;s.length) {\n        if (s.charAt(i) === t.charAt(j)) {\n            i++;\n        }\n        j++;\n    }\n    return i === s.length;\n};\n\n\n// TESTING  \nconsole.log('LCS', isSubsequence(\"ahbgdc\", 'abc')); </code></pre><p>&nbsp;</p><p><strong>Space Time Complexity</strong></p><p>&nbsp;</p><p>Time: O(n+m) ~ where n &amp; m are the length of the 2 strings</p><p>Space: O(1) ~ since we use only primitives in our solution&nbsp;</p>",
        "start": 214,
        "position": 7,
        "video": {
            "id": "video-4e3cfa54-a8d7-4c76-92d0-dd47fb440724",
            "url": "https://www.youtube.com/watch?v=QmGQImp6vtM",
            "seen": 214.09347900199324,
            "total": 257.884
        },
        "pin": "cyan"
    }, {
        "id": "bookmark-2e041cc2-2dd9-428d-991b-b7af9b82b34b",
        "description": "<p><strong>ðŸ“œ Leetcode: March 3rd 2022 - Arithmetic Slices</strong></p><p>&nbsp;</p><p><a href=\"https://leetcode.com/problems/arithmetic-slices/\">https:<i>//leetcode.com/problems/arithmetic-slices/</i></a></p><p>&nbsp;</p><p><strong>Leetcode Challenge #413</strong></p><p><br>An integer array is called arithmetic <i>if</i> it consists of at least three elements and <i>if</i> the difference between any two consecutive elements is the same.</p><p><br>+ For example, [1,3,5,7,9], [7,7,7,7], and [3,-1,-5,-9] are arithmetic sequences.</p><p>+ Given an integer array nums, <i>return</i> the number of arithmetic subarrays of nums.</p><p>+ A subarray is a contiguous subsequence of the array.</p><p>&nbsp;</p>",
        "start": 1,
        "position": 8,
        "video": {
            "id": "video-1953151c-2d3c-40ac-97bf-c5fbe73624e4",
            "url": "https://www.youtube.com/watch?v=qRHWAKCOLxM",
            "seen": 0.8639477254999589,
            "total": 602.466
        },
        "pin": "yellow"
    }, {
        "id": "bookmark-fbbef258-7970-4b80-a65e-74b7cc1e766c",
        "description": "<p>My approach to solving the Arithmetic Series problem</p><p>&nbsp;</p><p>+ Using 2 pointer approach</p><p>+ First consider the first element as \"i\"&nbsp;</p><p>+ Consider the next series as \"j\"</p><p>+ If j-1 == i then we know the numbers are adjacent to each other, get the difference, store as \"diff\"&nbsp;</p><p>+ if j-1 !== i then check if (j-1) - j equal the difference, if yes increment the number count</p><p>+ Return number count -2;</p><p>&nbsp;</p><pre><code class=\"language-javascript\">/**\n * @param {number[]} nums\n * @return {number}\n * Using 2 pointer approach \n */\nvar numberOfArithmeticSlices = function(A) {\n  let len = A.length;\n  let ans = 0;\n  for (let i = 0; i &lt; len; i++) {\n    let diff;\n    let num = 2;\n    for (let j = i + 1; j &lt; len; j++) {\n      if (j === i + 1)\n        diff = A[j] - A[i];\n      else if (A[j] - A[j - 1] === diff)\n        num++;\n      else\n        break;\n    }\n\n    ans += num - 2;\n  }\n\n  return ans;\n};</code></pre><p>&nbsp;</p><p><strong>Space Time Complexity:</strong></p><p>&nbsp;</p><p>Time: O(n^2) ~ because we use nested loops for 2 pointer approach</p><p>Space: O(1) ~ we use only primitives</p>",
        "start": 59,
        "position": 9,
        "video": {
            "id": "video-d4d0af64-1d19-4104-a3f6-3babc07b4542",
            "url": "https://www.youtube.com/watch?v=qRHWAKCOLxM",
            "seen": 59.186307647003495,
            "total": 602.466
        },
        "pin": "cyan"
    }, {
        "id": "bookmark-8c05cf69-a283-4ee0-aa33-e1d3c2bd41cd",
        "description": "<p>ðŸ“œ<strong>Leetcode: March 4th 2022 - Champagne Tower ðŸ¥‚</strong></p><p>&nbsp;</p><p><a href=\"https://leetcode.com/problems/champagne-tower/\">https:<i>//leetcode.com/problems/champagne-tower/</i></a></p><p>&nbsp;</p><p><strong>Leetcode Challenge #799</strong></p><p>&nbsp;</p><p>We stack glasses in a pyramid, where the first row has 1 glass, the second row has 2 glasses, and so on until the 100th row. Each glass holds one cup of champagne.</p><p>&nbsp;</p><p><i>Then, some champagne is poured into the first glass at the top. When the topmost glass is full, any excess liquid poured will fall equally to the glass immediately to the left and right of it. When those glasses become full, any excess champagne will fall equally to the left and right of those glasses, and so on. (A glass at the bottom row has its excess champagne fall on the floor.)</i></p><p><i>For example, after one cup of champagne is poured, the top most glass is full. After two cups of champagne are poured, the two glasses on the second row are half full. After three cups of champagne are poured, those two cups become full - there are 3 full glasses total now. After four cups of champagne are poured, the third row has the middle glass half full, and the two outside glasses are a quarter full, as pictured below.</i></p><p>&nbsp;</p><p>Now after pouring some non-negative integer cups of champagne, <strong>return how full the jth glass in the ith row is</strong> (both i and j are 0-indexed.)</p>",
        "start": 1,
        "position": 10,
        "video": {
            "id": "video-ed94a5fc-66b1-4082-8044-3574071f9cff",
            "url": "https://www.youtube.com/watch?v=BTndk4qhObQ",
            "seen": 1.1333483459992153,
            "total": 688.601
        },
        "pin": "yellow"
    }, {
        "id": "bookmark-575e1064-15ef-46ff-b4e6-ea4155047dc7",
        "description": "<p>This flow of glass in a pyramid structure is called. - <strong>Pascal's Triangle</strong></p>",
        "start": 76,
        "position": 11,
        "video": {
            "id": "video-98972740-886b-466b-bd42-a12df054d94c",
            "url": "https://www.youtube.com/watch?v=BTndk4qhObQ",
            "seen": 76.09115551957922,
            "total": 688.601
        }
    }, {
        "id": "bookmark-fe0080c5-ea84-40f5-b160-95152ac28599",
        "description": "<p>Just to know - how to implement a Pascal's triangle given a <strong>row</strong> which would be the height of the pyramid</p><p>&nbsp;</p><pre><code class=\"language-javascript\">/**\n * Function to generate pascal's triangle array based on the row input\n * @param {number} row \n * @returns {number[]}\n */\nconst pascalsTriangle = (row) =&gt; {\n    // base case if \n    if (row === 1) return [1];\n    // recursive\n    const prevLine = pascalsTriangle(row-1);\n    let currLine = [1];\n    for (let i=0; i&lt;prevLine.length-1; i++) {\n        currLine.push(prevLine[i] + prevLine[i+1]);    \n    }\n    currLine.push(1);\n    return currLine;\n};\n\n// Testing\nconst row = 5;\nconsole.log(`Pascal's triangle for row ${row} is: `, pascalsTriangle(row));</code></pre>",
        "start": 107,
        "position": 12,
        "video": {
            "id": "video-f67dd65e-a0c8-40b3-8ea1-06985c824874",
            "url": "https://www.youtube.com/watch?v=BTndk4qhObQ",
            "seen": 106.65868976072063,
            "total": 688.601
        },
        "pin": "cyan"
    }, {
        "id": "bookmark-771f3b77-a65a-4296-8212-e05c3d1260a9",
        "description": "<p>Generalise our approach</p><p>&nbsp;</p><p>+ This solution is solved very similar to Pascal's triangle except the value decreases&nbsp;</p><p>+ NOTE: Our final solution SHOULD not be greater than initial value provided</p><p>+ Every row in our Champagne tower can be generalised by the formula below</p><p>&nbsp;</p><pre><code class=\"language-javascript\">//                          n\n//               (n-1)/2         (n-1)/2\n// ((n-1)/2-1)/2 ((n-1/2-1)/2+((n-1)/2-1)/2 ((n-1)/2-1)/2</code></pre><p>&nbsp;</p>",
        "start": 191,
        "position": 13,
        "video": {
            "id": "video-65a70699-dc6f-4155-86c9-ce15bb2a77b4",
            "url": "https://www.youtube.com/watch?v=BTndk4qhObQ",
            "seen": 191.09489882695513,
            "total": 688.601
        }
    }, {
        "id": "bookmark-c82223d6-f3d7-489c-b207-87698cb01cbe",
        "description": "<p>Implement Champagne Tower (in Javascript)</p><p>&nbsp;</p><pre><code class=\"language-javascript\">/**\n * Using iterative approach\n * @param {number} poured\n * @param {number} query_row\n * @param {number} query_glass\n * @return {number}\n */\nvar champagneTower = function(poured, query_row, query_glass) {\n   // edge case\n    if (poured === 0) return 0;\n    // just like in pascal's triangle\n    let list = [poured];\n    // iterative approach\n    while (query_row-- &gt; 0) {\n        let temp = [];\n        temp.push(Math.max((list[0]-1)/2, 0));\n        for (let i=1; i&lt;list.length; i++) {\n            temp.push(Math.max((list[i-1]-1)/2, 0) + Math.max((list[i]-1)/2, 0));\n        }\n        // to get the symmetry effect\n        temp.push(temp[0]); \n        // pass the newly formed rows to list\n        list = [...temp];\n    }\n    // If the value is less than 1 then return 1 (non-zero)\n    return Math.min(1, list[query_glass]);\n};</code></pre>",
        "start": 330,
        "position": 14,
        "video": {
            "id": "video-6a5c4b00-af6f-49c3-910b-2e142370d5a8",
            "url": "https://www.youtube.com/watch?v=BTndk4qhObQ",
            "seen": 330.2817971688731,
            "total": 688.601
        },
        "pin": "cyan"
    }]
}