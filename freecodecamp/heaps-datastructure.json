{
    "id": "playlist-7ff411f3-da4b-4b30-ba37-2c22838297c2",
    "title": "Heaps - Javascript (Playlist)",
    "createdBy": "",
    "bookmarks": [{
        "id": "bookmark-daed3334-5df0-4906-9d0f-9192effc98a5",
        "description": "<p>ðŸ“œ <strong>What is a Heap</strong><br><br>Partially ordered Binary Tree which satisfies the \"Heap property\"</p><p>+ It belongs to the Non-linear data-structure (similar to Graphs, Trees, BST, Tries)</p><p>+ Some similarities to Binary tree</p><p>+ Max Heap -&gt; All Parent nodes are greater to or equal to child nodes</p><p>+ Min Heap -&gt; All Parent nodes are smaller to or equal to child nodes<br><br>## <strong>Min Heap</strong></p><p>A Min Heap is a tree where the <strong>parent node values are smaller or equal than the child node</strong> values<br><br><strong>## Max Heap</strong></p><p>A Max Heap is a tree where the <strong>parent node values are greater or equal than the child node</strong> values</p><p>&nbsp;</p><p>## <strong>Practical Uses of a Min / Max Heap</strong><br>+ A Min Heap data-structure is ideal for creating a Priority Queue (which also expects lower values on one end higher values on the other)<br>+ Unlike using Arrays where Time is <strong>O(n)</strong> for insertion and LinkedList also which is <strong>O(n)</strong>, Heaps give faster execution <strong>O(log n)</strong> for insertion of new nodes</p>",
        "start": 3,
        "position": 1,
        "video": {
            "id": "video-f37ae483-9b9a-4f6d-ad5c-63cf667039f1",
            "url": "https://www.youtube.com/watch?v=dM_JHpfFITs",
            "seen": 2.9954123745121475,
            "total": 881.621
        },
        "pin": "green"
    }, {
        "id": "bookmark-8d22e727-2cd2-42b1-befa-bb834c1770df",
        "description": "<p>Heaps, in Javascript - are more often implemented as Arrays</p><p><br>Consider the index of a heap as \"idx\"<br><br><strong>Relations</strong></p><p>+ Heap size -&gt; Length of the array</p><p>+ Left child -&gt; (idx * 2) -1</p><p>+ Right child -&gt; (idx * 2+1) -1</p><p>+ Parent node -&gt; Math.floor((idx+1)/2) - 1</p>",
        "start": 88,
        "position": 2,
        "video": {
            "id": "video-2a720f83-6db0-4979-9ed0-11b49e350691",
            "url": "https://www.youtube.com/watch?v=dM_JHpfFITs",
            "seen": 88.21486307519987,
            "total": 881.621
        }
    }, {
        "id": "bookmark-69c47ec9-d78e-4f02-81ef-db3002f783ce",
        "description": "<p><strong>Representation of Heap Data-structure (in Javascript)</strong></p><p>&nbsp;</p><p>+ For MinHeap - Pass the function to constructor - (a,b)=&gt;(a-b);</p><p>+ For MaxHeap - Pass the function to constructor - (a,b)=&gt;(b-a);</p><p>+ If no arguments to constructor, then by default it's a MinHeap<br>&nbsp;</p><pre><code class=\"language-javascript\">/**\n * egghead.io - Heap\n * https://github.com/basarat/algorithms/blob/master/src/heap/heap.ts\n */\n\n/**\n * Implements the heap data structure\n * A heap is used as a priority queue\n * Note: The default compare behavior gives you a min heap\n * @constructor ((a,b) =&gt; void) comparator, by default - ascending (a-b)\n */\nclass Heap {\n  constructor(compareFn = undefined) {\n    this.data = [];\n    this.compareFn =\n      compareFn &amp;amp;&amp;amp; typeof compareFn === \"function\"\n        ? compareFn\n        : (a, b) =&gt; a - b;\n  }\n\n  left(nodeIndex) {\n    return 2 * nodeIndex + 1;\n  }\n\n  right(nodeIndex) {\n    return 2 * nodeIndex + 2;\n  }\n\n  parent(nodeIndex) {\n    return nodeIndex % 2 == 0 ? (nodeIndex - 2) / 2 : (nodeIndex - 1) / 2;\n  }\n\n  /**\n   * Adds the given element into the heap in O(logn)\n   */\n  add(element) {\n    this.data.push(element);\n    this.siftUp(this.data.length - 1);\n  }\n\n  /**\n   * Moves the nod at the given index up to its proper place in the heap.\n   * @param index The index of the node to move up.\n   */\n  siftUp(index) {\n    let parent = this.parent(index);\n    while (\n      index &gt; 0 &amp;amp;&amp;amp;\n      this.compareFn(this.data[parent], this.data[index]) &gt; 0\n    ) {\n      [this.data[parent], this.data[index]] = [\n        this.data[index],\n        this.data[parent],\n      ];\n      index = parent;\n      parent = this.parent(index);\n    }\n  }\n\n  /**\n   * Retrieves and removes the root element of this heap in O(logn)\n   * - Returns undefined if the heap is empty.\n   */\n  remove() {\n    if (this.data.length &gt; 0) {\n      const root = this.data[0];\n      const last = this.data.pop();\n      if (this.data.length &gt; 0) {\n        this.data[0] = last;\n        this.siftDown(0);\n      }\n      return root;\n    }\n  }\n\n  /**\n   * Moves the node at the given index down to its proper place in the heap.\n   * @param index The index of the node to move down.\n   */\n  siftDown(index) {\n    /** @returns the index containing the smaller value */\n    const minIndex = (left, right) =&gt; {\n      if (right &gt;= this.data.length) {\n        if (left &gt;= this.data.length) {\n          return -1;\n        } else {\n          return left;\n        }\n      } else {\n        if (this.compareFn(this.data[left], this.data[right]) &lt;= 0) {\n          return left;\n        } else {\n          return right;\n        }\n      }\n    };\n\n    let min = minIndex(this.left(index), this.right(index));\n\n    while (min &gt;= 0 &amp;amp;&amp;amp; this.compareFn(this.data[index], this.data[min]) &gt; 0) {\n      [this.data[min], this.data[index]] = [this.data[index], this.data[min]];\n      index = min;\n      min = minIndex(this.left(index), this.right(index));\n    }\n  }\n\n  /**\n   * Returns the number of elements in the heap in O(1)\n   */\n  size() {\n    return this.data.length;\n  }\n\n  /**\n   * Retrieves but does not remove the root element of this heap in O(1)\n   * - Returns undefined if the heap is empty.\n   */\n  peek() {\n    if (this.data.length &gt; 0) {\n      return this.data[0];\n    } else {\n      return undefined;\n    }\n  }\n}\n\n// TESTING\n\nconst heap = new Heap((a, b) =&gt; b - a); // maxHeap\n\nheap.add(5);\nheap.add(4);\nheap.add(10);\nheap.add(20);\nconsole.log('Peek value is:', heap.peek()); // 20</code></pre>",
        "start": 267,
        "position": 3,
        "video": {
            "id": "video-3435f4cb-e7a3-465c-907f-61d16e6a0d70",
            "url": "https://www.youtube.com/watch?v=dM_JHpfFITs",
            "seen": 266.998685004971,
            "total": 881.621
        },
        "pin": "cyan"
    }, {
        "id": "bookmark-49876ac0-8341-4d5f-803f-dacc2a8ff6ff",
        "description": "<p><strong>Properties of a Binary Heap</strong></p><p>&nbsp;</p><p>+ A Parent should have at-most 2 children</p><p>+ It must be a complete Tree. Every node on a particular level MUST be filled from left to right, with the exception of the last level not needing to be full</p><p>+ Min-Heap : Every parent's key must be SMALLER (or equal) than it's children nodes (the root node is always the smallest)</p><p>+ Max-Heap : Every parent's key must be GREATER (or equal) than it's children nodes (the root node is always the largest)</p><p>+ Heapify - UP : Comparing the children with it's parent node</p><p>+ Heapify - DOWN: Comparing the parent node to it's children</p>",
        "start": 43,
        "position": 5,
        "video": {
            "id": "video-828a7a1b-c90e-4c26-ad96-a6be8a8e1209",
            "url": "https://www.youtube.com/watch?v=ifNlv0N5wT8",
            "seen": 42.922314156402585,
            "total": 1954
        },
        "pin": "green"
    }, {
        "id": "bookmark-bad0044c-eaff-406b-8ed2-10f2c2a43656",
        "description": "<p><strong>Representing Heaps using Arrays</strong><br><br>+ Parent Node: Math.floor ((index-1)/2)<br>+ Left childIndex : 2*index + 1</p><p>+ Right childIndex: 2*index + 2</p>",
        "start": 367,
        "position": 6,
        "video": {
            "id": "video-acfdacbd-0a7a-464c-a7a7-8d1c1bfb59b2",
            "url": "https://www.youtube.com/watch?v=ifNlv0N5wT8",
            "seen": 366.54199016021727,
            "total": 1954
        }
    }, {
        "id": "bookmark-df937c10-3fc6-4539-966b-cfe7aaeed3b3",
        "description": "<p><a href=\"https://leetcode.com/problems/kth-largest-element-in-a-stream/\">ðŸ“œ Leetcode #703</a> - <strong>Find the Kth Largest element in Stream</strong></p><p>&nbsp;</p><p><strong>Approach</strong></p><p>&nbsp; + add() - method logic</p><p>&nbsp; + Check Heap size with K</p><p>&nbsp; + if size less than K then just add to end of heap and bubble up</p><p>&nbsp; + if size more than K then add to end of heap, bubbleup and bubbledown</p><p>&nbsp; + Return the first element always (which is the Kth largest number)</p><p>&nbsp;</p><pre><code class=\"language-javascript\">/**\n * Find the Kth largest element\n * Leetcode #703 - https://leetcode.com/problems/kth-largest-element-in-a-stream/\n * https://www.youtube.com/watch?v=hOjcdrqMoQ8\n */\nclass KthLargest {\n  // constructor\n  constructor(k, nums) {\n    this.k = k;\n    this.heap = new MinHeap();\n    nums.map((item) =&gt; this.add(item));\n  }\n\n  // insert method\n  add(val) {\n    // check heap size with K\n    if (this.heap.size() &lt; this.k) {\n      this.heap.offer(val);\n    } else if (this.heap.peek() &lt; val) {\n      this.heap.offer(val);\n      this.heap.poll();\n    }\n    return this.heap.peek();\n  }\n}\n\n// TESTING\nconst kthLargest = new KthLargest(3, [4, 5, 8, 2]);\nconsole.log(kthLargest.add(3)); // return 4\nconsole.log(kthLargest.add(5)); // return 5\nconsole.log(kthLargest.add(10)); // return 5\nconsole.log(kthLargest.add(9)); // return 8\nconsole.log(kthLargest.add(4)); // return 8\n\n\n/*\n * NOTES\n * add() - method logic\n * Check Heap size with K\n * if size less than K then just add to end of heap and bubble up\n * if size more than K then add to end of heap, bubbleup and bubbledown\n * Return the first element always (which is the Kth largest number)\n */\n\n/**\n* MinHeap data-structure\n* Helper class\n*/\nclass MinHeap {\n  constructor(data = []) {\n    this.data = data;\n    this.comparator = (a, b) =&gt; a - b;\n    this.heapify();\n  }\n\n class MinHeap {\n  constructor(data = []) {\n    this.data = data;\n    this.comparator = (a, b) =&gt; a - b;\n    this.heapify();\n  }\n\n  // O(nlog(n))\n  heapify() {\n    if (this.size() &lt; 2) return;\n    for (let i = 1; i &lt; this.size(); i++) {\n      this.bubbleUp(i);\n    }\n  }\n\n  // O(1)\n  peek() {\n    if (this.size() === 0) return null;\n    return this.data[0];\n  }\n\n  // O(log(n))\n  offer(value) {\n    this.data.push(value);\n    this.bubbleUp(this.size() - 1);\n  }\n\n  // O(log(n))\n  poll() {\n    if (this.size() === 0) return null;\n    const result = this.data[0];\n    const last = this.data.pop();\n    if (this.size() !== 0) {\n      this.data[0] = last;\n      this.bubbleDown(0);\n    }\n    return result;\n  }\n\n  // O(log(n))\n  bubbleUp(index) {\n    while (index &gt; 0) {\n      const parentIndex = (index - 1) &gt;&gt; 1;\n      if (this.comparator(this.data[index], this.data[parentIndex]) &lt; 0) {\n        this.swap(index, parentIndex);\n        index = parentIndex;\n      } else {\n        break;\n      }\n    }\n  }\n\n  // O(log(n))\n  bubbleDown(index) {\n    const lastIndex = this.size() - 1;\n    while (true) {\n      const leftIndex = index * 2 + 1;\n      const rightIndex = index * 2 + 2;\n      let findIndex = index;\n      if (\n        leftIndex &lt;= lastIndex &amp;amp;&amp;amp;\n        this.comparator(this.data[leftIndex], this.data[findIndex]) &lt; 0\n      ) {\n        findIndex = leftIndex;\n      }\n      if (\n        rightIndex &lt;= lastIndex &amp;amp;&amp;amp;\n        this.comparator(this.data[rightIndex], this.data[findIndex]) &lt; 0\n      ) {\n        findIndex = rightIndex;\n      }\n      if (index !== findIndex) {\n        this.swap(index, findIndex);\n        index = findIndex;\n      } else {\n        break;\n      }\n    }\n  }\n\n  // O(1)\n  swap(index1, index2) {\n    [this.data[index1], this.data[index2]] = [\n      this.data[index2],\n      this.data[index1]\n    ];\n  }\n\n  // O(1)\n  size() {\n    return this.data.length;\n  }\n}</code></pre>",
        "start": 4,
        "position": 8,
        "video": {
            "id": "video-05af38e2-d376-4c45-ad49-ab9d8d41e2a5",
            "url": "https://www.youtube.com/watch?v=hOjcdrqMoQ8",
            "seen": 3.907145,
            "total": 727
        }
    }]
}